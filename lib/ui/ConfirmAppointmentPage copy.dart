import 'dart:convert';
// import 'dart:io';
import 'dart:typed_data';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart';
import 'package:onlinedoctorapp/services/AppointmentService.dart';
import 'package:onlinedoctorapp/services/DoctorService.dart';
import 'package:onlinedoctorapp/services/DocumentService.dart';
import 'AppointmentDetailsPage.dart';
import 'package:intl/intl.dart';
// import 'package:url_launcher/url_launcher.dart';

class ConfirmAppointmentPage extends StatefulWidget {
  final String doctorName;
  final String speciality;
  final String date;
  final String time;
  final String userName;
  final String observation;
  final int appointmentId; // Add appointmentId to constructor

  ConfirmAppointmentPage({
    required this.doctorName,
    required this.speciality,
    required this.date,
    required this.time,
    required this.userName,
    required this.observation,
    required this.appointmentId, // Initialize appointmentId
  });

  @override
  _ConfirmAppointmentPageState createState() => _ConfirmAppointmentPageState();
}

class _ConfirmAppointmentPageState extends State<ConfirmAppointmentPage> {
  final AppointmentService appointmentService = AppointmentService();
  List<PlatformFile> selectedFiles = [];

  void _addDocument() async {
    final result = await FilePicker.platform.pickFiles();
    if (result != null) {
      setState(() {
        selectedFiles.add(result.files.single);
      });
    }
  }

  void _removeDocument(int index) {
    setState(() {
      selectedFiles.removeAt(index);
    });
  }

  Future<void> _saveDocuments(int appointmentId) async {
    try {
      final documentService = DocumentService(
          'https://api-backend-p76c.onrender.com'); // Substitua pela sua baseUr

      for (var file in selectedFiles) {
        var documentBytes = file.bytes;

        if (documentBytes != null) {
          String base64Document = base64Encode(documentBytes);

          await documentService.addDocument(
            document: base64Document,
            date: DateTime.now(),
            appointmentId: appointmentId,
          );
        } else {
          throw Exception('Document bytes are null');
        }
      }

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Documents saved successfully.'),
        ),
      );
    } catch (e) {
      print('Error saving documents: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to save documents. Please try again.'),
        ),
      );
    }
  }

  void _scheduleAppointment() async {
    try {
      final doctorService = DoctorService();

      // ---------------------
      // 1. Fetch the doctor who will conduct the consultation
      List<String> doctorNamesParts = widget.doctorName.split(' ');
      String doctorName =
          doctorNamesParts.length > 2 ? doctorNamesParts[1] : '';
      final doctorId =
          await doctorService.getDoctorUserIdByName(doctorName.toString());

      // 2. Fetch the user who will attend the consultation
      List<String> patintNamesParts = widget.doctorName.split(' ');
      String patientName =
          patintNamesParts.length > 2 ? patintNamesParts[1] : '';
      final patientId =
          await doctorService.getDoctorUserIdByName(patientName.toString());

      if (doctorId == null || patientId == null) {
        throw Exception('Doctor or Patient ID not found');
      }

      // Convert the date String to DateTime
      DateTime appointmentDate = DateFormat('MMM dd, yyyy').parse(
          widget.date); // Assuming widget.date is in the format "yyyy-MM-dd"
      //----------------------

      // Build the Appointment object and send it to the API
      Appointment newAppointment = Appointment(
        id: 0, // The ID will be generated by the server
        doctorId: doctorId,
        patientId: patientId,
        observation: widget.observation, // Optional observation
        date: appointmentDate, // Assigning the converted DateTime here
        time: widget.time,
      );

      Appointment addedAppointment =
          await appointmentService.addAppointment(newAppointment);

      // Save attached documents
      await _saveDocuments(addedAppointment.id);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Appointment scheduled successfully.'),
        ),
      );

      // Wait for the snack bar to be displayed before navigating
      await Future.delayed(Duration(seconds: 2));

      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => AppointmentDetailsPage(
            doctorName: widget.doctorName,
            speciality: widget.speciality,
            date: widget.date,
            time: widget.time,
            userName: widget.userName,
            observation: widget.observation,
            appointmentId: addedAppointment.id,
          ),
        ),
      );
    } catch (e) {
      print('Error scheduling appointment: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to schedule appointment. Please try again.'),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Confirm Appointment'),
        backgroundColor: Colors.purple,
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildSectionTitle('Doctor'),
            _buildDoctorInfo(),
            _buildSectionTitle('Date'),
            _buildInfoText(widget.date),
            _buildSectionTitle('Time'),
            _buildInfoText(widget.time),
            _buildSectionTitle('Patient'),
            _buildInfoText(widget.userName),
            _buildSectionTitle('Observations'),
            _buildInfoText(widget.observation),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _addDocument,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
                backgroundColor: Colors.blue,
              ),
              child: Text('Add Document'),
            ),
            SizedBox(height: 20),
            _buildDocumentsTable(),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _scheduleAppointment,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
                backgroundColor: Colors.purple,
              ),
              child: Text('Schedule Appointment'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Text(
        title,
        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
      ),
    );
  }

  Widget _buildInfoText(String text) {
    return Text(
      text,
      style: TextStyle(fontSize: 16),
    );
  }

  Widget _buildDoctorInfo() {
    return ListTile(
      leading: CircleAvatar(
        backgroundImage: AssetImage('assets/onlinedoctor.png'),
      ),
      title: Text(widget.doctorName),
      subtitle: Text(widget.speciality),
    );
  }

  Widget _buildDocumentsTable() {
    return Expanded(
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: DataTable(
          columnSpacing: 15.0,
          columns: const <DataColumn>[
            DataColumn(
              label: Text(
                'Document',
                style: TextStyle(fontStyle: FontStyle.italic),
              ),
            ),
            DataColumn(
              label: Text(
                'Actions',
                style: TextStyle(fontStyle: FontStyle.italic),
              ),
            ),
          ],
          rows: List<DataRow>.generate(
            selectedFiles.length,
            (int index) => DataRow(
              color: MaterialStateProperty.resolveWith<Color?>(
                (Set<MaterialState> states) {
                  return index.isEven ? Colors.grey.shade200 : null;
                },
              ),
              cells: <DataCell>[
                DataCell(
                  Tooltip(
                    message: selectedFiles[index].name,
                    child: GestureDetector(
                      onTap: () {
                        var fileBytes = selectedFiles[index].bytes;
                        if (fileBytes != null) {
                          _launchURL(fileBytes);
                        } else {
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('File bytes are null.'),
                            ),
                          );
                        }
                      },
                      child: Text(selectedFiles[index].name),
                    ),
                  ),
                ),
                DataCell(
                  IconButton(
                    icon: Icon(Icons.delete),
                    onPressed: () => _removeDocument(index),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _launchURL(Uint8List fileBytes) {
    // Implement the logic to handle fileBytes appropriately on web
    // For example, you can create a Blob URL and launch it in a new tab
    // This is just a placeholder implementation
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('File launched.'),
      ),
    );
  }
}
